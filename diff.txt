Only in .: diff.txt
diff -r ./generators/adc_sar_salatch_pmos_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_salatch_pmos_layout_generator.py
361,362c361,362
<         #imbufln1 = laygen.relplace("I" + objectname_pfix + 'BUFLN1', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf*4, 1]))
<         imbufln0 = laygen.relplace("I" + objectname_pfix + 'BUFLN0', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf, 1]))
---
>         imbufln1 = laygen.relplace("I" + objectname_pfix + 'BUFLN1', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf*4, 1]))
>         imbufln0 = laygen.relplace("I" + objectname_pfix + 'BUFLN0', devname_nmos_body, pg, imbufln1.name, shape=np.array([m_buf, 1]))
370,371c370,371
<         #imbufrn1 = laygen.relplace("I" + objectname_pfix + 'BUFRN1', devname_nmos_body, pg, imbufrn0.name, shape=np.array([m_buf*4, 1]), transform='MY')
<         imbrn0 = laygen.relplace("I" + objectname_pfix + 'BRN0', devname_nmos_boundary, pg, imbufrn0.name, transform='MY')
---
>         imbufrn1 = laygen.relplace("I" + objectname_pfix + 'BUFRN1', devname_nmos_body, pg, imbufrn0.name, shape=np.array([m_buf*4, 1]), transform='MY')
>         imbrn0 = laygen.relplace("I" + objectname_pfix + 'BRN0', devname_nmos_boundary, pg, imbufrn1.name, transform='MY')
374,375c374,375
<         #imbufln1 = laygen.relplace("I" + objectname_pfix + 'BUFLN1', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf*4, 1]))
<         imbufln0 = laygen.relplace("I" + objectname_pfix + 'BUFLN0', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf, 1]))
---
>         imbufln1 = laygen.relplace("I" + objectname_pfix + 'BUFLN1', devname_nmos_body, pg, imbln0.name, shape=np.array([m_buf*4, 1]))
>         imbufln0 = laygen.relplace("I" + objectname_pfix + 'BUFLN0', devname_nmos_body, pg, imbufln1.name, shape=np.array([m_buf, 1]))
383,384c383,384
<         #imbufrn1 = laygen.relplace("I" + objectname_pfix + 'BUFRN1', devname_nmos_body, pg, imbufrn0.name, shape=np.array([m_buf*4, 1]), transform='MY')
<         imbrn0 = laygen.relplace("I" + objectname_pfix + 'BRN0', devname_nmos_boundary, pg, imbufrn0.name, transform='MY')
---
>         imbufrn1 = laygen.relplace("I" + objectname_pfix + 'BUFRN1', devname_nmos_body, pg, imbufrn0.name, shape=np.array([m_buf*4, 1]), transform='MY')
>         imbrn0 = laygen.relplace("I" + objectname_pfix + 'BRN0', devname_nmos_boundary, pg, imbufrn1.name, transform='MY')
388,389c388,389
<         #imbuflp1 = laygen.relplace("I" + objectname_pfix + 'BUFLP1', devname_pmos_body, pg, imblp0.name, shape=np.array([m_buf*4, 1]), transform='MX')
<         imbuflp0 = laygen.relplace("I" + objectname_pfix + 'BUFLP0', devname_pmos_body, pg, imblp0.name, shape=np.array([m_buf, 1]), transform='MX')
---
>         imbuflp1 = laygen.relplace("I" + objectname_pfix + 'BUFLP1', devname_pmos_body, pg, imblp0.name, shape=np.array([m_buf*4, 1]), transform='MX')
>         imbuflp0 = laygen.relplace("I" + objectname_pfix + 'BUFLP0', devname_pmos_body, pg, imbuflp1.name, shape=np.array([m_buf, 1]), transform='MX')
399,400c399,400
<         #imbufrp1 = laygen.relplace("I" + objectname_pfix + 'BUFRP1', devname_pmos_body, pg, imbufrp0.name, shape=np.array([m_buf*4, 1]), transform='R180')
<         imbrp0 = laygen.relplace("I" + objectname_pfix + 'BRP0', devname_pmos_boundary, pg, imbufrp0.name, transform='R180')
---
>         imbufrp1 = laygen.relplace("I" + objectname_pfix + 'BUFRP1', devname_pmos_body, pg, imbufrp0.name, shape=np.array([m_buf*4, 1]), transform='R180')
>         imbrp0 = laygen.relplace("I" + objectname_pfix + 'BRP0', devname_pmos_boundary, pg, imbufrp1.name, transform='R180')
413,414c413,414
<         #imbufrp1 = laygen.relplace("I" + objectname_pfix + 'BUFRP1', devname_pmos_body, pg, imbufrp0.name, shape=np.array([m_buf*4, 1]), transform='R180')
<         imbrp0 = laygen.relplace("I" + objectname_pfix + 'BRP0', devname_pmos_boundary, pg, imbufrp0.name, transform='R180')
---
>         imbufrp1 = laygen.relplace("I" + objectname_pfix + 'BUFRP1', devname_pmos_body, pg, imbufrp0.name, shape=np.array([m_buf*4, 1]), transform='R180')
>         imbrp0 = laygen.relplace("I" + objectname_pfix + 'BRP0', devname_pmos_boundary, pg, imbufrp1.name, transform='R180')
602d601
<     '''
617d615
<     '''
626d623
<     '''
635d631
<     '''
646d641
<     '''
657d651
<     '''
684d677
<     '''
711d703
<     '''
756,757c748,749
<     return [itapbln0, itapn0, itapbrn0, imbln0, imbufln0, imdmyln0, imln0, imln1, imrn1, imrn0, imdmyrn0, imbufrn0, imbrn0,
<             imblp0, imbuflp0, imdmylp0, imlp0, imrstlp0, imrstlp1, imrstrp1, imrstrp0, imrp0, imdmyrp0, imbufrp0, imbrp0,
---
>     return [itapbln0, itapn0, itapbrn0, imbln0, imbufln1, imbufln0, imdmyln0, imln0, imln1, imrn1, imrn0, imdmyrn0, imbufrn0, imbufrn1, imbrn0,
>             imblp0, imbuflp1, imbuflp0, imdmylp0, imlp0, imrstlp0, imrstlp1, imrstrp1, imrstrp0, imrp0, imdmyrp0, imbufrp0, imbufrp1, imbrp0,
770,771c762
<     #m_tot= max(m_in, m_clkh, m_rgnn + 2*m_rstn + m_buf*(1+4)) + 1 #at least one dummy
<     m_tot= max(m_in, m_clkh, m_rgnn + 2*m_rstn + m_buf) + 1 #at least one dummy
---
>     m_tot= max(m_in, m_clkh, m_rgnn + 2*m_rstn + m_buf*(1+4)) + 1 #at least one dummy
775,776c766
<     #m_rgnn_dmy = m_tot - m_rgnn - m_rstn * 2 - m_buf * (1+4)
<     m_rgnn_dmy = m_tot - m_rgnn - m_rstn * 2 - m_buf
---
>     m_rgnn_dmy = m_tot - m_rgnn - m_rstn * 2 - m_buf * (1+4)
816,817c806,807
<      irgnbln0, irgnbufln0, irgndmyln0, irgnln0, irgnln1, irgnrn1, irgnrn0, irgndmyrn0, irgnbufrn0, irgnbrn0,
<      irgnblp0, irgnbuflp0, irgndmylp0, irgnlp0, irgnrstlp0, irgnrstlp1, irgnrstrp1, irgnrstrp0, irgnrp0, irgndmyrp0, irgnbufrp0, irgnbrp0,
---
>      irgnbln0, irgnbufln1, irgnbufln0, irgndmyln0, irgnln0, irgnln1, irgnrn1, irgnrn0, irgndmyrn0, irgnbufrn0, irgnbufrn1, irgnbrn0,
>      irgnblp0, irgnbuflp1, irgnbuflp0, irgndmylp0, irgnlp0, irgnrstlp0, irgnrstlp1, irgnrstrp1, irgnrstrp0, irgnrp0, irgndmyrp0, irgnbufrp0, irgnbufrp1, irgnbrp0,
900c890
<     xy0=laygen.get_inst_pin_coord(irgnbuflp0.name, pinname='D0', gridname=rg_m3m4, index=np.array([m_buf-1, 0]), sort=True)[0]
---
>     xy0=laygen.get_inst_pin_coord(irgnbuflp1.name, pinname='D0', gridname=rg_m3m4, index=np.array([4*m_buf-1, 0]), sort=True)[0]
903c893
<                       refinstname1=irgnbuflp0.name, refpinname1='D0', refinstindex1=np.array([m_buf-1, 0]),
---
>                       refinstname1=irgnbuflp1.name, refpinname1='D0', refinstindex1=np.array([4*m_buf-1, 0]),
909c899
<     xy0=laygen.get_inst_pin_coord(irgnbufrp0.name, pinname='D0', gridname=rg_m3m4, index=np.array([m_buf-1, 0]), sort=True)[0]
---
>     xy0=laygen.get_inst_pin_coord(irgnbufrp1.name, pinname='D0', gridname=rg_m3m4, index=np.array([4*m_buf-1, 0]), sort=True)[0]
912c902
<                       refinstname1=irgnbufrp0.name, refpinname1='D0', refinstindex1=np.array([m_buf-1, 0]),
---
>                       refinstname1=irgnbufrp1.name, refpinname1='D0', refinstindex1=np.array([4*m_buf-1, 0]),
918,919c908,909
<     laygen.create_boundary_pin_form_rect(routp3, gridname=rg_m4m5, pinname='OUTM', layer=laygen.layers['pin'][5], size=4, direction='top')
<     laygen.create_boundary_pin_form_rect(routm3, gridname=rg_m4m5, pinname='OUTP', layer=laygen.layers['pin'][5], size=4, direction='top')
---
>     laygen.create_boundary_pin_form_rect(routp3, gridname=rg_m4m5, pinname='OUTP', layer=laygen.layers['pin'][5], size=4, direction='top')
>     laygen.create_boundary_pin_form_rect(routm3, gridname=rg_m4m5, pinname='OUTM', layer=laygen.layers['pin'][5], size=4, direction='top')
1028c1018
<     m_tot = max(m_in, m_clkh, m_rgnn + 2*m_rstn + m_buf) + 1  # at least one dummy
---
>     m_tot = max(m_in, m_clkh, m_rgnn + 2*m_rstn + m_buf*(1+4)) + 1  # at least one dummy
1238,1240c1228,1229
<     #m_buf=max(int(m_in-4), 1)   #1
<     m_buf=max(int(m_in), 1)   #1
<     m_rgnn=m_in-2*m_rstn #-m_buf  #1
---
>     m_buf=max(int(m_in-4), 1)   #1
>     m_rgnn=m_in-2*m_rstn-m_buf  #1
Only in ./generators: adc_sar_salatch_pmos_layout_generator.py.bak170315
diff -r ./generators/adc_sar_salatch_pmos_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_salatch_pmos_schematic_generator.py
27,28d26
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
29a28
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
31,35c30,32
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     params['m']=sizedict['m_salatch']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     params['m']=sysdict_i['m_salatch']
diff -r ./generators/adc_sar_salatch_pmos_verify.py ../laygo_bak170316_currupt/generators/adc_sar_salatch_pmos_verify.py
19c19
< cload=10e-15
---
> cload=20e-15
25c25
< extracted = True
---
> extracted = False
28,31c28,29
< 
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_spec_output="adc_sar_spec_output.yaml"
< yamlfile_size="adc_sar_size.yaml"
---
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
> yamlfile_system_output="adc_sar_dsn_system_output.yaml"
34,41c32,37
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_spec_output, 'r') as stream:
<         specdict_o = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     vamp_tran=specdict_o['v_bit']/2
<     vamp_noise=specdict_o['v_comp_noise']/2
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     with open(yamlfile_system_output, 'r') as stream:
>         sysdict_o = yaml.load(stream)
>     vamp_tran=sysdict_o['v_bit']/2
>     vamp_noise=sysdict_o['v_comp_noise']/2
63c59
<     tb.set_simulation_environments(['tt', 'ff', 'ss'])
---
>     tb.set_simulation_environments(['tt'])
86c82
<     tb_noise.set_simulation_environments(['tt', 'ff', 'ss'])
---
>     tb_noise.set_simulation_environments(['tt'])
Only in ./generators: adc_sar_sarabe_dualdelay_extract.py
Only in ../laygo_bak170316_currupt/generators: adc_sar_sarabe_dualdelay_layout_generator.py.bak170516
diff -r ./generators/adc_sar_sarabe_dualdelay_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarabe_dualdelay_schematic_generator.py
20d19
<     fo_ckgen=2, 
29,30d27
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
31a29
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
33,43c31,38
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cell_name = 'sarabe_dualdelay_'+str(specdict['n_bit'])+'b'
<     params['m_ckgen']=sizedict['m_sarclkgen']
<     params['fo_ckgen']=sizedict['fo_sarclkgen']
<     params['m_logic']=sizedict['m_sarlogic']
<     params['m_fsm']=sizedict['m_sarfsm']
<     params['m_ret']=sizedict['m_sarret']
<     params['fo_ret']=sizedict['fo_sarret']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     cell_name = 'sarabe_dualdelay_'+str(sysdict_i['n_bit'])+'b'
>     params['m_ckgen']=sysdict_i['m_sarclkgen']
>     params['m_logic']=sysdict_i['m_sarlogic']
>     params['m_fsm']=sysdict_i['m_sarfsm']
>     params['m_ret']=sysdict_i['m_sarret']
>     params['fo_ret']=sysdict_i['fo_sarret']
diff -r ./generators/adc_sar_sarafe_nsw_extract.py ../laygo_bak170316_currupt/generators/adc_sar_sarafe_nsw_extract.py
15,16c15
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
---
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
18,22c17,19
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cell_name='sarafe_nsw_'+str(specdict['n_bit']-1)+'b'
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     cell_name='sarafe_nsw_'+str(sysdict_i['n_bit']-1)+'b'
diff -r ./generators/adc_sar_sarafe_nsw_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarafe_nsw_schematic_generator.py
28d27
< '''
44,59d42
< '''
< 
< load_from_file=True
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
< 
< if load_from_file==True:
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     #params['m_sa']=sysdict_i['m_sa']
<     #params['num_bit']=sysdict_i['n_bit']-1
<     #params['c_m']=sysdict_i['c_m']
<     #params['rdx_array']=sysdict_i['rdx_array']
<     params['m_drv_list']=sizedict['capdrv_m_list']
diff -r ./generators/adc_sar_sarclkdelay_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarclkdelay_layout_generator.py
709,710c709
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
712,716c711,713
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         num_bits=sysdict_i['n_bit']
diff -r ./generators/adc_sar_sarclkgen_core_static_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarclkgen_core_static_layout_generator.py
267,268c267
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
270,275c269,271
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
<         m=sizedict['m_sarclkgen']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         m=sysdict_i['m_sarclkgen']
diff -r ./generators/adc_sar_sarclkgen_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarclkgen_layout_generator.py
30d29
< import yaml
73,74c72,73
<     #iinv3 = laygen.relplace(name="I" + objectname_pfix + 'INV3', templatename=inv_name,
<     #                        gridname=pg, refinstname=iinv2.name, template_libname=templib_logic)
---
>     iinv3 = laygen.relplace(name="I" + objectname_pfix + 'INV3', templatename=inv_name,
>                             gridname=pg, refinstname=iinv2.name, template_libname=templib_logic)
276,281c275,280
<     #rv0, rdoneb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['I'][0],
<     #                              np.array([x1, y0 - 4]), rg_m3m4)
<     #rv0, rdone_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['O'][0],
<     #                              np.array([x1, y0 - 1]), rg_m3m4)
<     #rv0, rclk_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv6.name]['O'][0],
<     #                              np.array([x1, y0 - 2]), rg_m3m4)
---
>     rv0, rdoneb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['I'][0],
>                                   np.array([x1, y0 - 4]), rg_m3m4)
>     rv0, rdone_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['O'][0],
>                                   np.array([x1, y0 - 1]), rg_m3m4)
>     rv0, rclk_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv6.name]['O'][0],
>                                   np.array([x1, y0 - 2]), rg_m3m4)
301,303c300,302
<     #laygen.create_boundary_pin_form_rect(rdoneb0, rg_m3m4, "DONEB", laygen.layers['pin'][4], size=6, direction='right')
<     #laygen.create_boundary_pin_form_rect(rdone_prb0, rg_m3m4, "DONEPRB", laygen.layers['pin'][4], size=6, direction='right')
<     #laygen.create_boundary_pin_form_rect(rclk_prb0, rg_m3m4, "CLKPRB", laygen.layers['pin'][4], size=6, direction='right')
---
>     laygen.create_boundary_pin_form_rect(rdoneb0, rg_m3m4, "DONEB", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rdone_prb0, rg_m3m4, "DONEPRB", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rclk_prb0, rg_m3m4, "CLKPRB", laygen.layers['pin'][4], size=6, direction='right')
395,405d393
<     m=2
<     #load from preset
<     load_from_file=True
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
<     if load_from_file==True:
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         m=sizedict['m_sarclkgen']
419c407
<                        m=m, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0]))
---
>                        m=2, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0]))
437c425
<                        m=m, m_space_4x=m_space_4x, m_space_2x=m_space_2x, m_space_1x=m_space_1x, origin=np.array([0, 0]))
---
>                        m=2, m_space_4x=m_space_4x, m_space_2x=m_space_2x, m_space_1x=m_space_1x, origin=np.array([0, 0]))
diff -r ./generators/adc_sar_sarclkgen_static_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarclkgen_static_layout_generator.py
44c44
<                        m=2, fo=2, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0])):
---
>                        m=2, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0])):
51c51
<     iobuf_name = 'inv_' + str(fo*m) + 'x'
---
>     iobuf_name = 'inv_' + str(4*m) + 'x'
53d52
<     nor_name = 'nor_' + str(m) + 'x'
55c54
<     mux_name = 'mux2to1_' + str(fo*m) + 'x'
---
>     mux_name = 'mux2to1_' + str(m) + 'x'
64c63
<     iinv7 = laygen.relplace(name="I" + objectname_pfix + 'INV7', templatename=inv_name,
---
>     iinv0 = laygen.relplace(name="I" + objectname_pfix + 'INV0', templatename=inv_name,
66,67c65,68
<     iinv9 = laygen.relplace(name="I" + objectname_pfix + 'INV9', templatename=inv_name,
<                             gridname=pg, refinstname=iinv7.name, template_libname=templib_logic)
---
>     iinv1 = laygen.relplace(name="I" + objectname_pfix + 'INV1', templatename=inv_name,
>                             gridname=pg, refinstname=iinv0.name, template_libname=templib_logic)
>     isr0 = laygen.relplace(name="I" + objectname_pfix + 'SR0', templatename=sr_name,
>                             gridname=pg, refinstname=iinv1.name, template_libname=templib_logic)
69,72c70,71
<                              gridname=pg, refinstname=iinv9.name, template_libname=templib_logic)
<     #iinv0 = laygen.relplace(name="I" + objectname_pfix + 'INV0', templatename=inv_name,
<     #                        gridname=pg, refinstname=inand0.name, template_libname=templib_logic)
<     iinv5a = laygen.relplace(name="I" + objectname_pfix + 'INV5A', templatename=inv_name,
---
>                              gridname=pg, refinstname=isr0.name, template_libname=templib_logic)
>     iinv2 = laygen.relplace(name="I" + objectname_pfix + 'INV2', templatename=inv_name,
74,77c73,74
<     iinv5b = laygen.relplace(name="I" + objectname_pfix + 'INV5B', templatename=inv_name,
<                             gridname=pg, refinstname=iinv5a.name, template_libname=templib_logic)
<     iinv5c = laygen.relplace(name="I" + objectname_pfix + 'INV5C', templatename=inv_name,
<                             gridname=pg, refinstname=iinv5b.name, template_libname=templib_logic)
---
>     iinv3 = laygen.relplace(name="I" + objectname_pfix + 'INV3', templatename=inv_name,
>                             gridname=pg, refinstname=iinv2.name, template_libname=templib_logic)
79c76,78
<                             gridname=pg, refinstname=iinv5c.name, template_libname=templib_logic)
---
>                             gridname=pg, refinstname=iinv3.name, template_libname=templib_logic)
>     iinv5 = laygen.relplace(name="I" + objectname_pfix + 'INV5', templatename=inv_name,
>                             gridname=pg, refinstname=iinv4.name, template_libname=templib_logic)
81c80
<                             gridname=pg, refinstname=iinv4.name, template_libname=workinglib)
---
>                             gridname=pg, refinstname=iinv5.name, template_libname=workinglib)
84,86c83
<     #imux0 = laygen.relplace(name="I" + objectname_pfix + 'MUX0', templatename=mux_name,
<     #                        gridname=pg, refinstname=iinv7.name, template_libname=templib_logic)
<     iinv8 = laygen.relplace(name="I" + objectname_pfix + 'INV8', templatename=iobuf_name,
---
>     iinv6 = laygen.relplace(name="I" + objectname_pfix + 'INV6', templatename=inv_name,
87a85,95
> 
>     iinv7 = laygen.relplace(name="I" + objectname_pfix + 'INV7', templatename=inv_name,
>                             gridname=pg, refinstname=iinv6.name, template_libname=templib_logic)
>     imux0 = laygen.relplace(name="I" + objectname_pfix + 'MUX0', templatename=mux_name,
>                             gridname=pg, refinstname=iinv7.name, template_libname=templib_logic)
>     iinv8 = laygen.relplace(name="I" + objectname_pfix + 'INV8', templatename=inv_name,
>                             gridname=pg, refinstname=imux0.name, template_libname=templib_logic)
>     iobuf0 = laygen.relplace(name="I" + objectname_pfix + 'IOBUF0', templatename=iobuf_name,
>                               gridname=pg, refinstname=iinv8.name, template_libname=templib_logic)
>     iobuf1 = laygen.relplace(name="I" + objectname_pfix + 'IOBUF1', templatename=iobuf_name,
>                               gridname=pg, refinstname=iobuf0.name, template_libname=templib_logic)
91c99
<     refi=iinv8.name
---
>     refi=iobuf1.name
114,117c122,125
<     x0 = laygen.get_inst_xy(name=inand0.name, gridname=rg_m3m4)[0] + 1
<     x1 = laygen.get_inst_xy(name=iinv8.name, gridname=rg_m3m4)[0]\
<          +laygen.get_template_size(name=iinv8.cellname, gridname=rg_m3m4, libname=templib_logic)[0] - 1
<     y0 = pdict[inand0.name]['A'][0][1] + 0
---
>     x0 = laygen.get_inst_xy(name=iinv0.name, gridname=rg_m3m4)[0] + 1
>     x1 = laygen.get_inst_xy(name=iobuf1.name, gridname=rg_m3m4)[0]\
>          +laygen.get_template_size(name=iobuf1.cellname, gridname=rg_m3m4, libname=templib_logic)[0] - 1
>     y0 = pdict[iinv0.name]['I'][0][1] + 0
119,120c127,140
<     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inr0.name]['O'][0],
<     #                                   pdict[iinv0.name]['I'][0], y0 - 1, rg_m3m4)
---
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv0.name]['O'][0],
>                                        pdict[inand0.name]['A'][0], y0 - 1, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv1.name]['O'][0],
>                                        pdict[inand0.name]['B'][0], y0 + 0, rg_m3m4)
>     # internal routes - sr
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv0.name]['O'][0],
>                                        pdict[isr0.name]['S'][0], y0 - 1, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv1.name]['O'][0],
>                                        pdict[isr0.name]['R'][0], y0 + 0, rg_m3m4)
>     # internal routes - and1
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['O'][0],
>                                        pdict[iinv2.name]['I'][0], y0 + 0, rg_m3m4) #DONE
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv2.name]['O'][0],
>                                        pdict[iinv3.name]['I'][0], y0 + 1, rg_m3m4)
121a142,143
>     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[in0.name]['D0'][0]+np.array([2, 0]),
>     #                                   pdict[inand1.name]['A'][0], y0 - 2, rg_m3m4)
126d147
<     # internal routes - mux
127a149,157
>                                        pdict[iinv6.name]['I'][0], y0 - 3, rg_m3m4)  # PHIB0
>     # internal routes - mux
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv6.name]['I'][0],
>                                        pdict[imux0.name]['I0'][0], y0 + 2, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv7.name]['O'][0],
>                                        pdict[imux0.name]['EN0'][0], y0 + 1, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv7.name]['I'][0],
>                                        pdict[imux0.name]['EN1'][0], y0 + 4, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[imux0.name]['O'][0],
129,144c159
<     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand1.name]['O'][0],
<     #                                   pdict[imux0.name]['I0'][0], y0 + 2, rg_m3m4)
<     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv7.name]['O'][0],
<     #                                   pdict[imux0.name]['EN0'][0], y0 + 1, rg_m3m4)
<     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv7.name]['I'][0],
<     #                                   pdict[imux0.name]['EN1'][0], y0 + 4, rg_m3m4)
<     #[rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[imux0.name]['O'][0],
<     #                                   pdict[iinv8.name]['I'][0], y0 + 2, rg_m3m4)
< 
<     # internal routes - clkdelay
<     [rv0, rdone0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['O'][0],
<                                        pdict[iinv5a.name]['I'][0], y0 + 0, rg_m3m4)  
<     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv5a.name]['O'][0],
<                                        pdict[iinv5b.name]['I'][0], y0 + 2, rg_m3m4)  
<     [rv0, rup0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv5b.name]['O'][0],
<                                        pdict[iinv5c.name]['I'][0], y0 + 1, rg_m3m4)  
---
> 
149c164
<                                        pdict[iinv5c.name]['O'][0], y0 + 2, rg_m3m4)  # upb
---
>                                        pdict[iinv5.name]['O'][0], y0 + 2, rg_m3m4)  # upb
151c166
<                                        pdict[inand0.name]['O'][0], y0 + 0, rg_m3m4) #DONE-pre
---
>                                        pdict[inand0.name]['O'][0], y0 + 0, rg_m3m4) #DONE
154,156c169,171
<     rv0, rsaop0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['A'][0],
<                                   np.array([x0, y0 + 2]), rg_m3m4)
<     rv0, rsaom0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['B'][0],
---
>     rv0, rsaopb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv0.name]['I'][0],
>                                    np.array([x0, y0 + 2]), rg_m3m4)
>     rv0, rsaomb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv1.name]['I'][0],
160,161c175,176
<     #rv0, rup0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv5.name]['I'][0],
<     #                               np.array([x0, y0 - 3]), rg_m3m4)
---
>     rv0, rup0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv5.name]['I'][0],
>                                    np.array([x0, y0 - 3]), rg_m3m4)
164c179
<     rv0, rextclk0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv9.name]['I'][0],
---
>     rv0, rextclk0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[imux0.name]['I1'][0],
166,167d180
<     #rv0, rextclk0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[imux0.name]['I1'][0],
<     #                                np.array([x0, y0 + 5]), rg_m3m4)
170,174c183,197
<     #rv0, rcompout0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[isr0.name]['Q'][0],
<     #                              np.array([x1, y0 + 6]), rg_m3m4)
<     #rv0, rdone0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['O'][0],
<     #                              np.array([x1, y0 + 0]), rg_m3m4)
<     v0, rclko0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand1.name]['O'][0],
---
>     rv0, rcompout0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[isr0.name]['Q'][0],
>                                   np.array([x1, y0 + 6]), rg_m3m4)
>     rv0, rdone0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[inand0.name]['O'][0],
>                                   np.array([x1, y0 + 0]), rg_m3m4)
>     rv0, rdoneb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['I'][0],
>                                   np.array([x1, y0 - 4]), rg_m3m4)
>     rv0, rdone_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv3.name]['O'][0],
>                                   np.array([x1, y0 - 1]), rg_m3m4)
>     rv0, rclk_prb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv6.name]['O'][0],
>                                   np.array([x1, y0 - 2]), rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv8.name]['O'][0],
>                                        pdict[iobuf0.name]['I'][0], y0 + 1, rg_m3m4)
>     [rv0, rh0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iobuf0.name]['O'][0],
>                                        pdict[iobuf1.name]['I'][0], y0 + 2, rg_m3m4)
>     v0, rclkob0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iobuf0.name]['O'][0],
176c199
<     v0, rclkob0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iinv8.name]['O'][0],
---
>     v0, rclko0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], pdict[iobuf1.name]['O'][0],
180,181c203,204
<     laygen.create_boundary_pin_form_rect(rsaop0, rg_m3m4, "SAOP", laygen.layers['pin'][4], size=6, direction='left')
<     laygen.create_boundary_pin_form_rect(rsaom0, rg_m3m4, "SAOM", laygen.layers['pin'][4], size=6, direction='left')
---
>     laygen.create_boundary_pin_form_rect(rsaopb0, rg_m3m4, "SAOPB", laygen.layers['pin'][4], size=6, direction='left')
>     laygen.create_boundary_pin_form_rect(rsaomb0, rg_m3m4, "SAOMB", laygen.layers['pin'][4], size=6, direction='left')
183c206
<     laygen.create_boundary_pin_form_rect(rup0, rg_m3m4, "UP", laygen.layers['pin'][4], size=4, direction='right')
---
>     laygen.create_boundary_pin_form_rect(rup0, rg_m3m4, "UP", laygen.layers['pin'][4], size=6, direction='left')
187,188c210,214
<     #laygen.create_boundary_pin_form_rect(rcompout0, rg_m3m4, "COMPOUT", laygen.layers['pin'][4], size=6, direction='right')
<     laygen.create_boundary_pin_form_rect(rdone0, rg_m3m4, "DONE", laygen.layers['pin'][4], size=4, direction='right')
---
>     laygen.create_boundary_pin_form_rect(rcompout0, rg_m3m4, "COMPOUT", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rdone0, rg_m3m4, "DONE", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rdoneb0, rg_m3m4, "DONEB", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rdone_prb0, rg_m3m4, "DONEPRB", laygen.layers['pin'][4], size=6, direction='right')
>     laygen.create_boundary_pin_form_rect(rclk_prb0, rg_m3m4, "CLKPRB", laygen.layers['pin'][4], size=6, direction='right')
281,282d306
<     m=2
<     fo=2
285,286c309
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
288,294c311,313
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
<         m=sizedict['m_sarclkgen']
<         fo=sizedict['fo_sarclkgen']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         num_bits=sysdict_i['n_bit']
304c323
<                        m=m, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0]))
---
>                        m=2, m_space_4x=0, m_space_2x=0, m_space_1x=0, origin=np.array([0, 0]))
318c337
<                        m=m, fo=fo, m_space_4x=m_space_4x, m_space_2x=m_space_2x, m_space_1x=m_space_1x, origin=np.array([0, 0]))
---
>                        m=2, m_space_4x=m_space_4x, m_space_2x=m_space_2x, m_space_1x=m_space_1x, origin=np.array([0, 0]))
Only in ./generators: adc_sar_sarclkgen_static_layout_generator.py.bak170315
diff -r ./generators/adc_sar_sarclkgen_static_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarclkgen_static_schematic_generator.py
20d19
<     fo=2,
24,25d22
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
26a24
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
28,33c26,28
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     params['m']=sizedict['m_sarclkgen']
<     params['fo']=sizedict['fo_sarclkgen']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     params['m']=sysdict_i['m_sarclkgen']
diff -r ./generators/adc_sar_sarfsm_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarfsm_layout_generator.py
356,357c356
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
359,372c358,362
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         cellname='sarfsm_'+str(specdict['n_bit'])+'b'
<         num_bits=specdict['n_bit']
<         m=sizedict['m_sarfsm']
<     #yamlfile_system_input="adc_sar_dsn_system_input.yaml"
<     #if load_from_file==True:
<     #    with open(yamlfile_system_input, 'r') as stream:
<     #        sysdict_i = yaml.load(stream)
<     #    cellname='sarfsm_'+str(sysdict_i['n_bit'])+'b'
<     #    m=sysdict_i['m_sarfsm']
<     #    num_bits=sysdict_i['n_bit']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         cellname='sarfsm_'+str(sysdict_i['n_bit'])+'b'
>         m=sysdict_i['m_sarfsm']
>         num_bits=sysdict_i['n_bit']
384c374
<     x0 = laygen.templates.get_template('sarafe_nsw_'+str(specdict['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
---
>     x0 = laygen.templates.get_template('sarafe_nsw_'+str(sysdict_i['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
diff -r ./generators/adc_sar_sarfsm_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarfsm_schematic_generator.py
23,24d22
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
25a24
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
27,33c26,29
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cell_name='sarfsm_'+str(specdict['n_bit'])+'b'
<     params['m']=sizedict['m_sarfsm']
<     params['rdx_array']=specdict['rdx_array']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     cell_name='sarfsm_'+str(sysdict_i['n_bit'])+'b'
>     params['m']=sysdict_i['m_sarfsm']
diff -r ./generators/adc_sar_sarlogic_wret_array_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarlogic_wret_array_layout_generator.py
185c185
<     # saop route
---
>     # saopb route
187,189c187,189
<                  refinstname0=islogic[0].name, refpinname0='SAOP2', refinstindex0=np.array([0, 0]),
<                  refinstname1=islogic[num_bits_row*(num_row-1)].name, refpinname1='SAOP2', refinstindex1=np.array([0, 0]))
<     rsaop=[]
---
>                  refinstname0=islogic[0].name, refpinname0='SAOPB2', refinstindex0=np.array([0, 0]),
>                  refinstname1=islogic[num_bits_row*(num_row-1)].name, refpinname1='SAOPB2', refinstindex1=np.array([0, 0]))
>     rsaopb=[]
191c191
<         rsaop.append(
---
>         rsaopb.append(
193c193
<                          refinstname0=islogic[i*num_bits_row].name, refpinname0='SAOP', 
---
>                          refinstname0=islogic[i*num_bits_row].name, refpinname0='SAOPB', 
195c195
<                          refinstname1=islogic[min(i*num_bits_row+num_bits_row-1, num_bits-1)].name, refpinname1='SAOP',
---
>                          refinstname1=islogic[min(i*num_bits_row+num_bits_row-1, num_bits-1)].name, refpinname1='SAOPB',
197c197
<     # saom route
---
>     # saomb route
199,201c199,201
<                  refinstname0=islogic[0].name, refpinname0='SAOM2', refinstindex0=np.array([0, 0]),
<                  refinstname1=islogic[num_bits_row*(num_row-1)].name, refpinname1='SAOM2', refinstindex1=np.array([0, 0]))
<     rsaom = []
---
>                  refinstname0=islogic[0].name, refpinname0='SAOMB2', refinstindex0=np.array([0, 0]),
>                  refinstname1=islogic[num_bits_row*(num_row-1)].name, refpinname1='SAOMB2', refinstindex1=np.array([0, 0]))
>     rsaomb = []
203c203
<         rsaom.append(
---
>         rsaomb.append(
205c205
<                          refinstname0=islogic[i*num_bits_row].name, refpinname0='SAOM', 
---
>                          refinstname0=islogic[i*num_bits_row].name, refpinname0='SAOMB', 
207c207
<                          refinstname1=islogic[min(i*num_bits_row+num_bits_row-1, num_bits-1)].name, refpinname1='SAOM',
---
>                          refinstname1=islogic[min(i*num_bits_row+num_bits_row-1, num_bits-1)].name, refpinname1='SAOMB',
214,215c214,215
<     laygen.create_boundary_pin_form_rect(rsaop[0], rg_m4m5, "SAOP", laygen.layers['pin'][4], size=6, direction='left')
<     laygen.create_boundary_pin_form_rect(rsaom[0], rg_m4m5, "SAOM", laygen.layers['pin'][4], size=6, direction='left')
---
>     laygen.create_boundary_pin_form_rect(rsaopb[0], rg_m4m5, "SAOPB", laygen.layers['pin'][4], size=6, direction='left')
>     laygen.create_boundary_pin_form_rect(rsaomb[0], rg_m4m5, "SAOMB", laygen.layers['pin'][4], size=6, direction='left')
325,326c325
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
328,332c327,329
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         cellname='sarlogic_wret_array_'+str(specdict['n_bit'])+'b'
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         cellname='sarlogic_wret_array_'+str(sysdict_i['n_bit'])+'b'
347c344
<     x0 = laygen.templates.get_template('sarafe_nsw_'+str(specdict['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
---
>     x0 = laygen.templates.get_template('sarafe_nsw_'+str(sysdict_i['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
diff -r ./generators/adc_sar_sarlogic_wret_array_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarlogic_wret_array_schematic_generator.py
24,25c24
< yamlfile_system_input="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
---
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
29,30d27
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
32c29
<     params['m']=sizedict['m_sarlogic']
---
>     params['m']=sysdict_i['m_sarlogic']
diff -r ./generators/adc_sar_sarlogic_wret_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarlogic_wret_layout_generator.py
57,62c57,62
<     #isaopb0 = laygen.place(name = "I" + objectname_pfix + 'INV0', templatename = inv_name,
<     #                      gridname = pg, xy=origin, template_libname=templib_logic)
<     #isaomb0 = laygen.relplace(name="I" + objectname_pfix + 'INV1', templatename=inv_name,
<     #                         gridname=pg, refinstname=isaopb0.name, template_libname=templib_logic)
<     ioai0 = laygen.place(name = "I" + objectname_pfix + 'OAI0', templatename = oai22_name,
<                             gridname = pg, xy=origin, template_libname=templib_logic)
---
>     isaopb0 = laygen.place(name = "I" + objectname_pfix + 'INV0', templatename = inv_name,
>                           gridname = pg, xy=origin, template_libname=templib_logic)
>     isaomb0 = laygen.relplace(name="I" + objectname_pfix + 'INV1', templatename=inv_name,
>                              gridname=pg, refinstname=isaopb0.name, template_libname=templib_logic)
>     ioai0 = laygen.relplace(name = "I" + objectname_pfix + 'OAI0', templatename = oai22_name,
>                             gridname = pg, refinstname = isaomb0.name, template_libname=templib_logic)
81,84c81,84
<     #isaopb0_i_xy = laygen.get_inst_pin_coord(isaopb0.name, 'I', rg_m3m4)
<     #isaopb0_o_xy = laygen.get_inst_pin_coord(isaopb0.name, 'O', rg_m3m4)
<     #isaomb0_i_xy = laygen.get_inst_pin_coord(isaomb0.name, 'I', rg_m3m4)
<     #isaomb0_o_xy = laygen.get_inst_pin_coord(isaomb0.name, 'O', rg_m3m4)
---
>     isaopb0_i_xy = laygen.get_inst_pin_coord(isaopb0.name, 'I', rg_m3m4)
>     isaopb0_o_xy = laygen.get_inst_pin_coord(isaopb0.name, 'O', rg_m3m4)
>     isaomb0_i_xy = laygen.get_inst_pin_coord(isaomb0.name, 'I', rg_m3m4)
>     isaomb0_o_xy = laygen.get_inst_pin_coord(isaomb0.name, 'O', rg_m3m4)
113,114c113,114
<     y0 = ioai0_a_xy[0][1]
<     x0 = laygen.get_inst_xy(name=ioai0.name, gridname=rg_m3m4)[0] + 1
---
>     y0 = isaopb0_i_xy[0][1]
>     x0 = laygen.get_inst_xy(name=isaopb0.name, gridname=rg_m3m4)[0] + 1
119,121d118
<     #saop/saom
<     rsaopv0, rsaop0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], ioai0_c_xy[0], np.array([x0, y0 + 3]), rg_m3m4)
<     rsaomv0, rsaom0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], ioai1_c_xy[0], np.array([x0, y0 + 4]), rg_m3m4)
123,124c120,121
<     #rsaopbv0, rsaopb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], isaopb0_i_xy[0], np.array([x0, y0 + 3]), rg_m3m4)
<     #rsaombv0, rsaomb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], isaomb0_i_xy[0], np.array([x0, y0 + 4]), rg_m3m4)
---
>     rsaopbv0, rsaopb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], isaopb0_i_xy[0], np.array([x0, y0 + 3]), rg_m3m4)
>     rsaombv0, rsaomb0 = laygen.route_vh(laygen.layers['metal'][3], laygen.layers['metal'][4], isaomb0_i_xy[0], np.array([x0, y0 + 4]), rg_m3m4)
126,127c123,124
<     #[rv0, rvplus0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], isaopb0_o_xy[0], ioai0_c_xy[0], y0 - 0, rg_m3m4)
<     #[rv0, rvminus0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], isaomb0_o_xy[0], ioai1_c_xy[0], y0 + 1, rg_m3m4)
---
>     [rv0, rvplus0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], isaopb0_o_xy[0], ioai0_c_xy[0], y0 - 0, rg_m3m4)
>     [rv0, rvminus0, rv1] = laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], isaomb0_o_xy[0], ioai1_c_xy[0], y0 + 1, rg_m3m4)
158,161c155,158
<     laygen.create_boundary_pin_form_rect(rsaop0, rg_m3m4, "SAOP", laygen.layers['pin'][4], size=6, direction='left')
<     laygen.pin_from_rect('SAOP2', laygen.layers['pin'][3], rsaopv0, gridname=rg_m3m4, netname='SAOP')
<     laygen.create_boundary_pin_form_rect(rsaom0, rg_m3m4, "SAOM", laygen.layers['pin'][4], size=6, direction='left')
<     laygen.pin_from_rect('SAOM2', laygen.layers['pin'][3], rsaomv0, gridname=rg_m3m4, netname='SAOM')
---
>     laygen.create_boundary_pin_form_rect(rsaopb0, rg_m3m4, "SAOPB", laygen.layers['pin'][4], size=6, direction='left')
>     laygen.pin_from_rect('SAOPB2', laygen.layers['pin'][3], rsaopbv0, gridname=rg_m3m4, netname='SAOPB')
>     laygen.create_boundary_pin_form_rect(rsaomb0, rg_m3m4, "SAOMB", laygen.layers['pin'][4], size=6, direction='left')
>     laygen.pin_from_rect('SAOMB2', laygen.layers['pin'][3], rsaombv0, gridname=rg_m3m4, netname='SAOMB')
171c168
<     create_power_pin_from_inst(laygen, layer=laygen.layers['pin'][2], gridname=rg_m1m2, inst_left=ioai0, inst_right=izmid0)
---
>     create_power_pin_from_inst(laygen, layer=laygen.layers['pin'][2], gridname=rg_m1m2, inst_left=isaopb0, inst_right=izmid0)
222,223c219
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
225,229c221,223
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         m=sizedict['m_sarlogic']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         m=sysdict_i['m_sarlogic']
diff -r ./generators/adc_sar_sarlogic_wret_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarlogic_wret_schematic_generator.py
27c27
< yamlfile_system_input="adc_sar_size.yaml"
---
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
diff -r ./generators/adc_sar_sarret_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_sarret_layout_generator.py
437,438c437
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
440,446c439,441
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
<         m_sarret=sizedict['m_sarret']
<         fo_sarret=sizedict['fo_sarret']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         num_bits=sysdict_i['n_bit']
454c449
<                          m=m_sarret, fo=fo_sarret, origin=np.array([0, 0]))
---
>                          m=2, fo=2, origin=np.array([0, 0]))
464c459
<                      routing_grid_m3m4=rg_m3m4, num_bits=num_bits, num_bits_row=int(num_bits/2), m_space_4x=0, m_space_2x=0,
---
>                      routing_grid_m3m4=rg_m3m4, num_bits=9, num_bits_row=4, m_space_4x=0, m_space_2x=0,
468c463
<     x0 = laygen.templates.get_template('sarafe_nsw_'+str(specdict['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
---
>     x0 = laygen.templates.get_template('sarafe_nsw_'+str(sysdict_i['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
478c473
<                     routing_grid_m3m4=rg_m3m4, num_bits=num_bits, num_bits_row=int(num_bits/2), m_space_4x=m_space_4x,
---
>                     routing_grid_m3m4=rg_m3m4, num_bits=9, num_bits_row=4, m_space_4x=m_space_4x,
diff -r ./generators/adc_sar_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_schematic_generator.py
20d19
<     fo_ckgen=2, 
29,30c28,30
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
---
> 
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
> yamlfile_capdrv_nsw_array_output="adc_sar_capdrv_nsw_array_output.yaml"
32,44c32,43
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cell_name = 'sar_'+str(specdict['n_bit'])+'b'
<     params['m_sa']=sizedict['m_salatch']
<     params['m_drv_list']=sizedict['capdrv_m_list']
<     params['m_logic']=sizedict['m_sarlogic']
<     params['m_fsm']=sizedict['m_sarfsm']
<     params['m_ret']=sizedict['m_sarret']
<     params['fo_ret']=sizedict['fo_sarret']
<     params['m_ckgen']=sizedict['m_sarclkgen']
<     params['fo_ckgen']=sizedict['fo_sarclkgen']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     with open(yamlfile_capdrv_nsw_array_output, 'r') as stream:
>         capdrvdict_o = yaml.load(stream)
>     cell_name = 'sar_'+str(sysdict_i['n_bit'])+'b'
>     params['m_sa']=sysdict_i['m_salatch']
>     params['m_drv_list']=capdrvdict_o['m_list']
>     params['m_logic']=sysdict_i['m_sarlogic']
>     params['m_fsm']=sysdict_i['m_sarfsm']
>     params['m_ret']=sysdict_i['m_sarret']
>     params['fo_ret']=sysdict_i['fo_sarret']
>     params['m_ckgen']=sysdict_i['m_sarclkgen']
diff -r ./generators/adc_sar_space_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_space_layout_generator.py
300,301c300
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
303,307c302,303
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
321c317
<     x0 = laygen.templates.get_template('sarafe_nsw_'+str(num_bits-1)+'b', libname=workinglib).xy[1][0] \
---
>     x0 = laygen.templates.get_template('sarafe_nsw_'+str(sysdict_i['n_bit']-1)+'b', libname=workinglib).xy[1][0] \
Only in ./generators/adc_sar_templates: capdac_8b_1x
Binary files ./generators/adc_sar_templates/salatch_pmos/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/salatch_pmos/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/salatch_pmos/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/salatch_pmos/schematic/sch.oa differ
Only in ./generators/adc_sar_templates: salatch_pmos_bak170315
Binary files ./generators/adc_sar_templates/sar_9b/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_9b/data.dm differ
Binary files ./generators/adc_sar_templates/sar_9b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_9b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sar_9b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_9b/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sar_9b/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_9b/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sarabe_9b/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_9b/data.dm differ
Binary files ./generators/adc_sar_templates/sarabe_9b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_9b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarabe_9b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_9b/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarabe_9b/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_9b/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sarabe_dualdelay_9b/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_dualdelay_9b/data.dm differ
Binary files ./generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/thumbnail_128x128.png and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_dualdelay_9b/schematic/thumbnail_128x128.png differ
Binary files ./generators/adc_sar_templates/sarabe_dualdelay_9b/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarabe_dualdelay_9b/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sarafe_nsw_8b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarafe_nsw_8b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarafe_nsw_8b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarafe_nsw_8b/schematic/sch.oa differ
Only in ./generators/adc_sar_templates/sarclkdelay_fine/schematic: data.dm
Only in ./generators/adc_sar_templates/sarclkdelay_fine/schematic: master.tag
Only in ./generators/adc_sar_templates/sarclkdelay_fine/schematic: sch.oa
Binary files ./generators/adc_sar_templates/sarclkgen/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen/data.dm differ
Binary files ./generators/adc_sar_templates/sarclkgen/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarclkgen/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarclkgen/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sarclkgen_static/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen_static/data.dm differ
Binary files ./generators/adc_sar_templates/sarclkgen_static/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen_static/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarclkgen_static/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen_static/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarclkgen_static/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarclkgen_static/symbol/symbol.oa differ
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315: data.dm
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315/schematic: data.dm
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315/schematic: master.tag
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315/schematic: sch.oa
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315/symbol: master.tag
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315/symbol: symbol.oa
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2: data.dm
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2/schematic: data.dm
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2/schematic: master.tag
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2/schematic: sch.oa
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2/symbol: master.tag
Only in ./generators/adc_sar_templates/sarclkgen_static_bak170315_2/symbol: symbol.oa
Binary files ./generators/adc_sar_templates/sarlogic_wret/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret/data.dm differ
Binary files ./generators/adc_sar_templates/sarlogic_wret/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarlogic_wret/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarlogic_wret/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sarlogic_wret_array_9b/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret_array_9b/data.dm differ
Binary files ./generators/adc_sar_templates/sarlogic_wret_array_9b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret_array_9b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sarlogic_wret_array_9b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret_array_9b/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sarlogic_wret_array_9b/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sarlogic_wret_array_9b/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b/data.dm differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b/schematic/sch.oa differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b/symbol/symbol.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b/symbol/symbol.oa differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b_array_8slice/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b_array_8slice/schematic/data.dm differ
Binary files ./generators/adc_sar_templates/sar_wsamp_9b_array_8slice/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_templates/sar_wsamp_9b_array_8slice/schematic/sch.oa differ
diff -r ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/data.sdb ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/data.sdb
17c17
< 			<test enabled="1">adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1
---
> 			<test>adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1
159d158
< 		<disabledtests></disabledtests>
diff -r ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/analyses ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/analyses
21c21
< analysis(tran fields stop) "2n"
---
> analysis(tran fields stop) "200p"
Binary files ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/convergence and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/convergence differ
diff -r ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/spList ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/adexl/test_states/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/spectre/adc_sar_testbenches:capdrv_nsw_array_8b_tb_tran:1_active/spList
1c1
< ; Mar 13 22:45:24 2017
---
> ; Feb 12 23:33:05 2017
Binary files ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/schematic/data.dm differ
Binary files ./generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/capdrv_nsw_array_8b_tb_tran/schematic/sch.oa differ
Binary files ./generators/adc_sar_testbenches/sampler_nmos_tb_ac/schematic/data.dm and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/sampler_nmos_tb_ac/schematic/data.dm differ
Binary files ./generators/adc_sar_testbenches/sampler_nmos_tb_ac/schematic/sch.oa and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/sampler_nmos_tb_ac/schematic/sch.oa differ
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/adexl: data.sdb
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/adexl: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/adexl: test_states
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload: config
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/schematic: data.dm
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/schematic: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload/schematic: sch.oa
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_ac_cload: spectre_state1
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/adexl: data.sdb
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/adexl: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/adexl: test_states
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/schematic: data.dm
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/schematic: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise/schematic: sch.oa
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise: spectre_state1
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/adexl: data.sdb
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/adexl: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/adexl: test_states
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/schematic: data.dm
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/schematic: master.tag
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload/schematic: sch.oa
Only in ./generators/adc_sar_testbenches/sampler_nmos_tb_noise_cload: spectre_state1
diff -r ./generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/ADE_state.info ../laygo_bak170316_currupt/generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/ADE_state.info
1c1
< projectDir = '"/tools/scratch/jdhan/simulation/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/adexl/results/data/.tmpADEDir_jdhan/adc_sar_testbenches:sar_9b_tb_tran:1/simulation"
---
> projectDir = '"/tools/scratch/jdhan/simulation/adc_sar_scratch/sar_9b_tb_tran_static_scratch/adexl/results/data/.tmpADEDir_jdhan/adc_sar_testbenches:sar_9b_tb_tran:1/simulation"
Binary files ./generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/convergence.state and ../laygo_bak170316_currupt/generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/convergence.state differ
diff -r ./generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/spList.state ../laygo_bak170316_currupt/generators/adc_sar_testbenches/sar_9b_tb_tran_static/spectre_state1/spList.state
1c1
< ; Mar 15 20:44:27 2017
---
> ; Feb 21 09:00:38 2017
Only in ./generators/adc_sar_testbenches/sarafe_nsw_8b_tb_drv/schematic: data.dm
Only in ./generators/adc_sar_testbenches/sarafe_nsw_8b_tb_drv/schematic: master.tag
Only in ./generators/adc_sar_testbenches/sarafe_nsw_8b_tb_drv/schematic: sch.oa
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/adexl: data.sdb
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/adexl: master.tag
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/adexl: results
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/adexl: test_states
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/config: expand.cfg
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/config: expand.cfg%
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/config: master.tag
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/config: prop.cfg
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing: config_netlist
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/schematic: data.dm
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/schematic: master.tag
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing/schematic: sch.oa
Only in ./generators/adc_sar_testbenches/sar_wsamp_9b_tb_tran_timing: spectre_state1
Only in ./generators: adc_sar_wsamp_extract.py
diff -r ./generators/adc_sar_wsamp_layout_generator.py ../laygo_bak170316_currupt/generators/adc_sar_wsamp_layout_generator.py
90,92c90
<             pv=np.array([pdict_m5m6_thick_basic_temp_sig[isamp.name]['outp'][0][0], p[0][1]])
<             laygen.via(None,pv, rg_m5m6_thick_basic_temp_sig)
<             #laygen.via(None,p[0], rg_m5m6_thick_basic_temp_sig)
---
>             laygen.via(None,p[0], rg_m5m6_thick_basic_temp_sig)
95,97c93
<             pv=np.array([pdict_m5m6_thick_basic_temp_sig[isamp.name]['outn'][0][0], p[0][1]])
<             laygen.via(None,pv, rg_m5m6_thick_basic_temp_sig)
<             #laygen.via(None,p[0], rg_m5m6_thick_basic_temp_sig)
---
>             laygen.via(None,p[0], rg_m5m6_thick_basic_temp_sig)
102c98
<                          xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isamp.name]['outp'][0][0],inp_y-1]), 
---
>                          xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isar.name]['INP0'][0][0],inp_y-1]), 
104c100
<     rinm0 = laygen.route(None, laygen.layers['metal'][5],
---
>     rinp0 = laygen.route(None, laygen.layers['metal'][5],
106c102
<                          xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isamp.name]['outn'][0][0],inm_y-1]), 
---
>                          xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isar.name]['INM0'][0][0],inm_y-1]), 
108,115d103
<     #rinp0 = laygen.route(None, laygen.layers['metal'][5],
<     #                     xy0=pdict_m5m6_thick_basic_temp_sig[isamp.name]['outp'][0],
<     #                     xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isar.name]['INP0'][0][0],inp_y-1]), 
<     #                     gridname0=rg_m5m6_thick_basic_temp_sig)
<     #rinm0 = laygen.route(None, laygen.layers['metal'][5],
<     #                     xy0=pdict_m5m6_thick_basic_temp_sig[isamp.name]['outn'][0],
<     #                     xy1=np.array([pdict_m5m6_thick_basic_temp_sig[isar.name]['INM0'][0][0],inm_y-1]), 
<     #                     gridname0=rg_m5m6_thick_basic_temp_sig)
147c135
<     #laygen.add_pin('CLKPRB_SAR', 'CLKPRB_SAR', sar_xy+sar_pins['CLKPRB']['xy'], sar_pins['CLKPRB']['layer'])
---
>     laygen.add_pin('CLKPRB_SAR', 'CLKPRB_SAR', sar_xy+sar_pins['CLKPRB']['xy'], sar_pins['CLKPRB']['layer'])
152c140
<     #laygen.add_pin('COMPOUT', 'COMPOUT', sar_xy+sar_pins['COMPOUT']['xy'], sar_pins['COMPOUT']['layer'])
---
>     laygen.add_pin('COMPOUT', 'COMPOUT', sar_xy+sar_pins['COMPOUT']['xy'], sar_pins['COMPOUT']['layer'])
214d201
<     #samp_lib = 'adc_sar_generated'
249,250c236
<     yamlfile_spec="adc_sar_spec.yaml"
<     yamlfile_size="adc_sar_size.yaml"
---
>     yamlfile_system_input="adc_sar_dsn_system_input.yaml"
252,261c238,240
<         with open(yamlfile_spec, 'r') as stream:
<             specdict = yaml.load(stream)
<         with open(yamlfile_size, 'r') as stream:
<             sizedict = yaml.load(stream)
<         num_bits=specdict['n_bit']
<     #yamlfile_system_input="adc_sar_dsn_system_input.yaml"
<     #if load_from_file==True:
<     #    with open(yamlfile_system_input, 'r') as stream:
<     #        sysdict_i = yaml.load(stream)
<     #    num_bits=sysdict_i['n_bit']
---
>         with open(yamlfile_system_input, 'r') as stream:
>             sysdict_i = yaml.load(stream)
>         num_bits=sysdict_i['n_bit']
diff -r ./generators/adc_sar_wsamp_schematic_generator.py ../laygo_bak170316_currupt/generators/adc_sar_wsamp_schematic_generator.py
20d19
<     sar_fo_ckgen=2, 
30,31c29,30
<     samp_fgn=12,
<     samp_fg_inbuf_list=[(8, 8), (14, 14)],
---
>     samp_fgn=20,
>     samp_fg_inbuf_list=[(10, 10), (20, 20)],
33,34c32,33
<     samp_nduml=10,
<     samp_ndumr=4,
---
>     samp_nduml=4,
>     samp_ndumr=6,
39,40c38,40
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
---
> 
> yamlfile_system_input="adc_sar_dsn_system_input.yaml"
> yamlfile_capdrv_nsw_array_output="adc_sar_capdrv_nsw_array_output.yaml"
42,54c42,53
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cell_name = 'sar_wsamp_'+str(specdict['n_bit'])+'b'
<     params['sar_m_sa']=sizedict['m_salatch']
<     params['sar_m_drv_list']=sizedict['capdrv_m_list']
<     params['sar_m_logic']=sizedict['m_sarlogic']
<     params['sar_m_fsm']=sizedict['m_sarfsm']
<     params['sar_m_ret']=sizedict['m_sarret']
<     params['sar_fo_ret']=sizedict['fo_sarret']
<     params['sar_m_ckgen']=sizedict['m_sarclkgen']
<     params['sar_fo_ckgen']=sizedict['fo_sarclkgen']
---
>     with open(yamlfile_system_input, 'r') as stream:
>         sysdict_i = yaml.load(stream)
>     with open(yamlfile_capdrv_nsw_array_output, 'r') as stream:
>         capdrvdict_o = yaml.load(stream)
>     cell_name = 'sar_wsamp_'+str(sysdict_i['n_bit'])+'b'
>     params['sar_m_sa']=sysdict_i['m_salatch']
>     params['sar_m_drv_list']=capdrvdict_o['m_list']
>     params['sar_m_logic']=sysdict_i['m_sarlogic']
>     params['sar_m_fsm']=sysdict_i['m_sarfsm']
>     params['sar_m_ret']=sysdict_i['m_sarret']
>     params['sar_fo_ret']=sysdict_i['fo_sarret']
>     params['sar_m_ckgen']=sysdict_i['m_sarclkgen']
Only in ./generators/BagModules/adc_sar_templates: capdac_8b_1x.py
Only in ./generators/BagModules/adc_sar_templates: salatch_pmos_bak170315.py
diff -r ./generators/BagModules/adc_sar_templates/salatch_pmos.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/salatch_pmos.py
74,75c74,75
<         m_buf=max(int(m_in), 1)
<         m_rgnp=m_in-2*m_rstp #-m_buf
---
>         m_buf=max(int(m_in-4), 1)
>         m_rgnp=m_in-2*m_rstp-m_buf
77c77
<         m_tot=max(m_in, m_clkh, m_rgnp+m_rstp*2+m_buf)+1 #+1 #at least one dummy 
---
>         m_tot=max(m_in, m_clkh, m_rgnp+m_rstp*2+m_buf*(1+4))+1 #+1 #at least one dummy 
80c80
<         m_rgnp_dmy = m_tot - m_rgnp - m_rstp*2 - m_buf
---
>         m_rgnp_dmy = m_tot - m_rgnp - m_rstp*2 - m_buf*(1+4)
104,105c104,105
<         #self.instances['IBUFP2'].design(w=pw, l=lch, nf=m_buf*2*4, intent=device_intent)
<         #self.instances['IBUFP3'].design(w=pw, l=lch, nf=m_buf*2*4, intent=device_intent)
---
>         self.instances['IBUFP2'].design(w=pw, l=lch, nf=m_buf*2*4, intent=device_intent)
>         self.instances['IBUFP3'].design(w=pw, l=lch, nf=m_buf*2*4, intent=device_intent)
108,109c108,109
<         #self.instances['IBUFN2'].design(w=nw, l=lch, nf=m_buf*2*4, intent=device_intent)
<         #self.instances['IBUFN3'].design(w=nw, l=lch, nf=m_buf*2*4, intent=device_intent)
---
>         self.instances['IBUFN2'].design(w=nw, l=lch, nf=m_buf*2*4, intent=device_intent)
>         self.instances['IBUFN3'].design(w=nw, l=lch, nf=m_buf*2*4, intent=device_intent)
diff -r ./generators/BagModules/adc_sar_templates/sar_9b.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sar_9b.py
49c49
<     def design(self, lch, pw, nw, m_sa, m_drv_list, m_ckgen, fo_ckgen, m_ckdly, m_logic, m_fsm, m_ret, fo_ret, device_intent='fast'):
---
>     def design(self, lch, pw, nw, m_sa, m_drv_list, m_ckgen, m_ckdly, m_logic, m_fsm, m_ret, fo_ret, device_intent='fast'):
76d75
<         self.parameters['fo_ckgen'] = fo_ckgen
79c78
<         self.instances['IABE0'].design(lch=lch, pw=pw, nw=nw, m_ckgen=m_ckgen, fo_ckgen=fo_ckgen, m_ckdly=m_ckdly, m_logic=m_logic, m_fsm=m_fsm, 
---
>         self.instances['IABE0'].design(lch=lch, pw=pw, nw=nw, m_ckgen=m_ckgen, m_ckdly=m_ckdly, m_logic=m_logic, m_fsm=m_fsm, 
diff -r ./generators/BagModules/adc_sar_templates/sarabe_dualdelay_9b.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sarabe_dualdelay_9b.py
49c49
<     def design(self, lch, pw, nw, m_ckgen, m_ckdly, fo_ckgen, m_logic, m_fsm, m_ret, fo_ret, device_intent='fast'):
---
>     def design(self, lch, pw, nw, m_ckgen, m_ckdly, m_logic, m_fsm, m_ret, fo_ret, device_intent='fast'):
69d68
<         self.parameters['fo_ckgen'] = fo_ckgen
76c75
<         self.instances['ICKGEN0'].design(lch=lch, pw=pw, nw=nw, m=m_ckgen, fo=fo_ckgen, device_intent=device_intent)
---
>         self.instances['ICKGEN0'].design(lch=lch, pw=pw, nw=nw, m=m_ckgen, device_intent=device_intent)
Only in ./generators/BagModules/adc_sar_templates: sarclkdelay_fine.py
diff -r ./generators/BagModules/adc_sar_templates/sarclkgen.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sarclkgen.py
25,28d24
< from __future__ import (absolute_import, division,
<                         print_function, unicode_literals)
< # noinspection PyUnresolvedReferences,PyCompatibility
< from builtins import *
39d34
< # noinspection PyPep8Naming
49c44
<     def design(self):
---
>     def design(self, lch, pw, nw, m, device_intent='fast'):
65c60,83
<         pass
---
>         self.parameters['lch'] = lch
>         self.parameters['pw'] = pw
>         self.parameters['nw'] = nw
>         self.parameters['m'] = m
>         self.parameters['device_intent'] = device_intent
>         self.instances['IINV0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV1'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV2'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV3'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV4'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV5'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV6'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV7'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV8'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['ISR0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IND0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IND1'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IMUX0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IN0'].design(l=lch, w=nw, nf=m, intent=device_intent)
>         self.instances['IN1'].design(l=lch, w=nw, nf=m, intent=device_intent)
>         self.instances['IP0'].design(l=lch, w=pw, nf=m, intent=device_intent)
>         self.instances['IP1'].design(l=lch, w=pw, nf=m, intent=device_intent)
>         self.instances['IOBUF0'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
>         self.instances['IOBUF1'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
Only in ./generators/BagModules/adc_sar_templates: sarclkgen_static_bak170315_2.py
Only in ./generators/BagModules/adc_sar_templates: sarclkgen_static_bak170315.py
diff -r ./generators/BagModules/adc_sar_templates/sarclkgen_static.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sarclkgen_static.py
49c49
<     def design(self, lch, pw, nw, m, fo, device_intent='fast'):
---
>     def design(self, lch, pw, nw, m, device_intent='fast'):
69d68
<         self.parameters['fo'] = fo
71,72c70,73
<         #self.instances['IINV0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
<         #self.instances['IINV1'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
---
>         self.instances['IINV0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV1'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV2'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV3'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
74,76c75,76
<         self.instances['IINV5A'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
<         self.instances['IINV5B'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
<         self.instances['IINV5C'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
---
>         self.instances['IINV5'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['IINV6'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
78,79c78,79
<         self.instances['IINV9'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
<         #self.instances['ISR0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
---
>         self.instances['IINV8'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
>         self.instances['ISR0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
82,85c82
< 
<         #self.instances['IMUX0'].design(lch=lch, pw=pw, nw=nw, m=m*fo, device_intent=device_intent)
<         self.instances['IINV8'].design(lch=lch, pw=pw, nw=nw, m=m*fo, device_intent=device_intent)
< 
---
>         self.instances['IMUX0'].design(lch=lch, pw=pw, nw=nw, m=m, device_intent=device_intent)
87,88c84,85
<         #self.instances['IOBUF0'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
<         #self.instances['IOBUF1'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
---
>         self.instances['IOBUF0'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
>         self.instances['IOBUF1'].design(lch=lch, pw=pw, nw=nw, m=m*4, device_intent=device_intent)
diff -r ./generators/BagModules/adc_sar_templates/sarlogic_wret.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sarlogic_wret.py
70,71c70,71
<         #self.instances['IINV0'].design(lch=lch, pw=pw, nw=nw, m=1, device_intent=device_intent)
<         #self.instances['IINV1'].design(lch=lch, pw=pw, nw=nw, m=1, device_intent=device_intent)
---
>         self.instances['IINV0'].design(lch=lch, pw=pw, nw=nw, m=1, device_intent=device_intent)
>         self.instances['IINV1'].design(lch=lch, pw=pw, nw=nw, m=1, device_intent=device_intent)
diff -r ./generators/BagModules/adc_sar_templates/sar_wsamp_9b.py ../laygo_bak170316_currupt/generators/BagModules/adc_sar_templates/sar_wsamp_9b.py
49c49
<     def design(self, sar_lch, sar_pw, sar_nw, sar_m_sa, sar_m_drv_list, sar_m_ckgen, sar_fo_ckgen, sar_m_ckdly, sar_m_logic, sar_m_fsm, sar_m_ret, sar_fo_ret, sar_device_intent, samp_lch, samp_wp, samp_wn, samp_fgn, samp_fg_inbuf_list, samp_fg_outbuf_list, samp_nduml, samp_ndumr, samp_nsep, samp_intent):
---
>     def design(self, sar_lch, sar_pw, sar_nw, sar_m_sa, sar_m_drv_list, sar_m_ckgen, sar_m_ckdly, sar_m_logic, sar_m_fsm, sar_m_ret, sar_fo_ret, sar_device_intent, samp_lch, samp_wp, samp_wn, samp_fgn, samp_fg_inbuf_list, samp_fg_outbuf_list, samp_nduml, samp_ndumr, samp_nsep, samp_intent):
71d70
<         self.parameters['sar_fo_ckgen'] = sar_fo_ckgen
89c88
<                                        m_ckgen=sar_m_ckgen, fo_ckgen=sar_fo_ckgen, m_ckdly=sar_m_ckdly, m_logic=sar_m_logic, m_fsm=sar_m_fsm, 
---
>                                        m_ckgen=sar_m_ckgen, m_ckdly=sar_m_ckdly, m_logic=sar_m_logic, m_fsm=sar_m_fsm, 
Only in ./generators/BagModules/logic_templates: nor.py
Only in ../laygo_bak170316_currupt/generators: diff.txt
Only in ../laygo_bak170316_currupt/generators: .diff.txt.swp
Only in ./generators/logic_templates/nor: data.dm
Only in ./generators/logic_templates/nor/schematic: data.dm
Only in ./generators/logic_templates/nor/schematic: master.tag
Only in ./generators/logic_templates/nor/schematic: sch.oa
Only in ./generators/logic_templates/nor/symbol: master.tag
Only in ./generators/logic_templates/nor/symbol: symbol.oa
diff -r ./generators/logic_templates_layout_generator.py ../laygo_bak170316_currupt/generators/logic_templates_layout_generator.py
654,656d653
<     #ip0 = laygen.relplace("I"+objectname_pfix+'P0', devname_pmos_space, pg, in0.name, direction='top', transform='MX')
<     #ip1 = laygen.relplace("I"+objectname_pfix+'P2', devname_pmos_space, pg, ip0.name, transform='MX', shape=np.array([m*2, 1]))
<     #ip2 = laygen.relplace("I"+objectname_pfix+'P3', devname_pmos_space, pg, ip1.name, transform='MX')
711,866d707
< def generate_nor(laygen, objectname_pfix,
<                  placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m1m2_pin, routing_grid_m2m3_pin,
<                  devname_nmos_boundary, devname_nmos_body, devname_pmos_boundary, devname_pmos_body,
<                  m=1, origin=np.array([0,0]), create_pin=False):
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m1m2_pin = routing_grid_m1m2_pin
<     rg_m2m3_pin = routing_grid_m2m3_pin
< 
<     m=max(1, int(m/2)) #using nf=2 devices
< 
<     # placement
<     in0 = laygen.place("I"+objectname_pfix + 'N0', devname_nmos_boundary, pg, xy=origin)
<     in1 = laygen.relplace("I"+objectname_pfix + 'N1', devname_nmos_body, pg, in0.name, shape=np.array([m, 1]))
<     in2 = laygen.relplace("I" + objectname_pfix + 'N2', devname_nmos_boundary, pg, in1.name)
<     in3 = laygen.relplace("I" + objectname_pfix + 'N3', devname_nmos_boundary, pg, in2.name)
<     in4 = laygen.relplace("I"+objectname_pfix + 'N4', devname_nmos_body, pg, in3.name, shape=np.array([m, 1]))
<     in5 = laygen.relplace("I"+objectname_pfix + 'N5', devname_nmos_boundary, pg, in4.name)
< 
<     ip0 = laygen.relplace("I"+objectname_pfix + 'P0', devname_pmos_boundary, pg, in0.name, direction='top', transform='MX')
<     ip1 = laygen.relplace("I"+objectname_pfix + 'P1', devname_pmos_body, pg, ip0.name, transform='MX', shape=np.array([m, 1]))
<     ip2 = laygen.relplace("I"+objectname_pfix + 'P2', devname_pmos_boundary, pg, ip1.name, transform='MX')
<     ip3 = laygen.relplace("I"+objectname_pfix + 'P3', devname_pmos_boundary, pg, ip2.name, transform='MX')
<     ip4 = laygen.relplace("I"+objectname_pfix + 'P4', devname_pmos_body, pg, ip3.name, transform='MX', shape=np.array([m, 1]))
<     ip5 = laygen.relplace("I"+objectname_pfix + 'P5', devname_pmos_boundary, pg, ip4.name, transform='MX')
< 
<     # route
<     # b0
<     for i in range(m):
<         laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                      refinstname0=in1.name, refpinname0='G0', refinstindex0=np.array([i, 0]),
<                      refinstname1=ip1.name, refpinname1='G0', refinstindex1=np.array([i, 0]),
<                      )
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='G0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     if m == 1:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([1, 0]), gridname0=rg_m1m2,
<                      refinstname0=in1.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                      refinstname1=in1.name, refpinname1='G0', refinstindex1=np.array([m - 1, 0]),
<                      endstyle0="extend", endstyle1="extend")
<         rb0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([-1, 0]), xy1=np.array([-1, 2]), gridname0=rg_m2m3,
<                            refinstname0=in1.name, refpinname0='G0', refinstname1=in1.name, refpinname1='G0',
<                            endstyle0="extend", endstyle1="extend")
<         laygen.via(None, np.array([-1, 0]), refinstname=in1.name, refpinname='G0', gridname=rg_m2m3)
<     else:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                      refinstname0=in1.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                      refinstname1=in1.name, refpinname1='G0', refinstindex1=np.array([m - 1, 0]))
<         rb0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, 0]), xy1=np.array([0, 2]), gridname0=rg_m2m3,
<                            refinstname0=in1.name, refpinname0='G0', refinstname1=in1.name, refpinname1='G0',
<                            endstyle0="extend", endstyle1="extend")
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='G0', gridname=rg_m2m3)
<     # a0
<     for i in range(m):
<         laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                      refinstname0=in4.name, refpinname0='G0', refinstindex0=np.array([i, 0]),
<                      refinstname1=ip4.name, refpinname1='G0', refinstindex1=np.array([i, 0]),
<                      )
<         laygen.via(None, np.array([0, 0]), refinstname=ip4.name, refpinname='G0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     if m == 1:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([1, 0]), gridname0=rg_m1m2,
<                      refinstname0=ip4.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                      refinstname1=ip4.name, refpinname1='G0', refinstindex1=np.array([m - 1, 0]),
<                      endstyle0="extend", endstyle1="extend")
<         ra0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([-1, 0]), xy1=np.array([-1, 2]), gridname0=rg_m2m3,
<                            refinstname0=ip4.name, refpinname0='G0', refinstname1=ip4.name, refpinname1='G0',
<                            endstyle0="extend", endstyle1="extend")
<         laygen.via(None, np.array([-1, 0]), refinstname=ip4.name, refpinname='G0', gridname=rg_m2m3)
<     else:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                      refinstname0=ip4.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                      refinstname1=ip4.name, refpinname1='G0', refinstindex1=np.array([m - 1, 0]))
<         ra0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, 0]), xy1=np.array([0, 2]), gridname0=rg_m2m3,
<                            refinstname0=ip4.name, refpinname0='G0', refinstname1=ip4.name, refpinname1='G0',
<                            endstyle0="extend", endstyle1="extend")
<         laygen.via(None, np.array([0, 0]), refinstname=ip4.name, refpinname='G0', gridname=rg_m2m3)
< 
<     # internal connection between mos
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=in1.name, refpinname0='D0',
<                  refinstname1=in4.name, refpinname1='D0', refinstindex1=np.array([m - 1, 0]))
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=ip1.name, refpinname0='D0',
<                  refinstname1=ip4.name, refpinname1='S1', refinstindex1=np.array([m - 1, 0]))
<     for i in range(m):
<         laygen.via(None, np.array([0, 1]), refinstname=in1.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 1]), refinstname=ip1.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 1]), refinstname=in4.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 1]), refinstname=ip4.name, refpinname='S0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<     laygen.via(None, np.array([0, 1]), refinstname=ip4.name, refpinname='S1', refinstindex=np.array([m-1, 0]), gridname=rg_m1m2)
<     # output
<     if m==1:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([1, 0]), gridname0=rg_m2m3,
<                      refinstname0=ip4.name, refpinname0='D0', refinstindex0=np.array([0, 0]),
<                      refinstname1=ip4.name, refpinname1='D0', refinstindex1=np.array([m-1, 0]),
<                      endstyle0="extend", endstyle1="extend")
<     else:
<         laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m2m3,
<                      refinstname0=ip4.name, refpinname0='D0', refinstindex0=np.array([0, 0]),
<                      refinstname1=ip4.name, refpinname1='D0', refinstindex1=np.array([m-1, 0]))
<     ro0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, 0]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                        refinstname0=ip4.name, refpinname0='D0', refinstindex0=np.array([m - 1, 0]),
<                        refinstname1=in4.name, refpinname1='D0', refinstindex1=np.array([m - 1, 0]))
<     for i in range(m):
<         laygen.via(None, np.array([0, 0]), refinstname=ip4.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<     laygen.via(None, np.array([0, 0]), refinstname=ip4.name, refpinname='D0', gridname=rg_m2m3, refinstindex=np.array([m - 1, 0]))
<     laygen.via(None, np.array([0, 1]), refinstname=in4.name, refpinname='D0', gridname=rg_m2m3, refinstindex=np.array([m - 1, 0]))
<     # power and ground route
<     xy_s0 = laygen.get_template_pin_coord(ip1.cellname, 'S0', rg_m1m2)[0, :]
<     for i in range(m):
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s0 * np.array([1, 0]), xy1=xy_s0, gridname0=rg_m1m2,
<                      refinstname0=ip1.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=ip1.name, refinstindex1=np.array([i, 0]))
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s0 * np.array([1, 0]), xy1=xy_s0, gridname0=rg_m1m2,
<                      refinstname0=in1.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=in1.name, refinstindex1=np.array([i, 0]))
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s0 * np.array([1, 0]), xy1=xy_s0, gridname0=rg_m1m2,
<                      refinstname0=in4.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=in4.name, refinstindex1=np.array([i, 0]))
<         laygen.via(None, xy_s0 * np.array([1, 0]), refinstname=ip1.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<         laygen.via(None, xy_s0 * np.array([1, 0]), refinstname=in1.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<         laygen.via(None, xy_s0 * np.array([1, 0]), refinstname=in4.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<     xy_s1 = laygen.get_template_pin_coord(ip1.cellname, 'S1', rg_m1m2)[0, :]
<     for i in range(m):
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s1 * np.array([1, 0]), xy1=xy_s1, gridname0=rg_m1m2,
<                      refinstname0=ip1.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=ip1.name, refinstindex1=np.array([i, 0]))
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s1 * np.array([1, 0]), xy1=xy_s1, gridname0=rg_m1m2,
<                      refinstname0=in1.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=in1.name, refinstindex1=np.array([i, 0]))
<         laygen.route(None, laygen.layers['metal'][1], xy0=xy_s1 * np.array([1, 0]), xy1=xy_s1, gridname0=rg_m1m2,
<                      refinstname0=in4.name, refinstindex0=np.array([i, 0]),
<                      refinstname1=in4.name, refinstindex1=np.array([i, 0]))
<         laygen.via(None, xy_s1 * np.array([1, 0]), refinstname=ip1.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<         laygen.via(None, xy_s1 * np.array([1, 0]), refinstname=in1.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<         laygen.via(None, xy_s1 * np.array([1, 0]), refinstname=in4.name, gridname=rg_m1m2,
<                    refinstindex=np.array([i, 0]))
<     # power and groud rail
<     xy = laygen.get_template_size(ip5.cellname, rg_m1m2) * np.array([1, 0])
<     rvdd=laygen.route("R"+objectname_pfix+"VDD0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                  refinstname0=ip0.name, refinstname1=ip5.name)
<     rvss=laygen.route("R"+objectname_pfix+"VSS0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                  refinstname0=in0.name, refinstname1=in5.name)
<     # pin
<     if create_pin == True:
<         create_io_pin(laygen, layer=laygen.layers['pin'][3], gridname=rg_m2m3_pin,
<                       pinname_list = ['A', 'B', 'O'], rect_list=[ra0, rb0, ro0])
<         create_power_pin(laygen, layer=laygen.layers['pin'][2], gridname=rg_m1m2, rect_vdd=rvdd, rect_vss=rvss)
< 
2646,2675d2486
<     laygen.add_cell('nsw_12x')
<     laygen.sel_cell('nsw_12x')
<     generate_nsw(laygen, objectname_pfix='NSW0',
<                    placement_grid=pg, routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3,
<                    routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                    devname_nmos_boundary='nmos4_fast_boundary',
<                    devname_nmos_body='nmos4_fast_center_nf2',
<                    devname_nmos_space='nmos4_fast_space',
<                    devname_pmos_boundary='pmos4_fast_boundary',
<                    devname_pmos_body='pmos4_fast_center_nf2',
<                    devname_pmos_space='pmos4_fast_space',
<                    m=12, create_pin=True
<                    )
<     laygen.add_template_from_cell()
< 
<     laygen.add_cell('nsw_16x')
<     laygen.sel_cell('nsw_16x')
<     generate_nsw(laygen, objectname_pfix='NSW0',
<                    placement_grid=pg, routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3,
<                    routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                    devname_nmos_boundary='nmos4_fast_boundary',
<                    devname_nmos_body='nmos4_fast_center_nf2',
<                    devname_nmos_space='nmos4_fast_space',
<                    devname_pmos_boundary='pmos4_fast_boundary',
<                    devname_pmos_body='pmos4_fast_center_nf2',
<                    devname_pmos_space='pmos4_fast_space',
<                    m=16, create_pin=True
<                    )
<     laygen.add_template_from_cell()
< 
2690,2725d2500
<     laygen.add_cell('nor_2x')
<     laygen.sel_cell('nor_2x')
<     generate_nor(laygen, objectname_pfix='NR0', placement_grid=pg, routing_grid_m1m2=rg_m1m2,
<                   routing_grid_m2m3=rg_m2m3, routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                   devname_nmos_boundary='nmos4_fast_boundary',
<                   devname_nmos_body='nmos4_fast_center_nf2',
<                   devname_pmos_boundary='pmos4_fast_boundary',
<                   devname_pmos_body='pmos4_fast_center_nf2',
<                   m=2, create_pin=True
<                   )
<     laygen.add_template_from_cell()
< 
<     laygen.add_cell('nor_4x')
<     laygen.sel_cell('nor_4x')
<     generate_nor(laygen, objectname_pfix='NR0', placement_grid=pg, routing_grid_m1m2=rg_m1m2,
<                   routing_grid_m2m3=rg_m2m3, routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                   devname_nmos_boundary='nmos4_fast_boundary',
<                   devname_nmos_body='nmos4_fast_center_nf2',
<                   devname_pmos_boundary='pmos4_fast_boundary',
<                   devname_pmos_body='pmos4_fast_center_nf2',
<                   m=4, create_pin=True
<                   )
<     laygen.add_template_from_cell()
< 
<     laygen.add_cell('nor_8x')
<     laygen.sel_cell('nor_8x')
<     generate_nor(laygen, objectname_pfix='NR0', placement_grid=pg, routing_grid_m1m2=rg_m1m2,
<                      routing_grid_m2m3=rg_m2m3, routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                      devname_nmos_boundary='nmos4_fast_boundary',
<                      devname_nmos_body='nmos4_fast_center_nf2',
<                      devname_pmos_boundary='pmos4_fast_boundary',
<                      devname_pmos_body='pmos4_fast_center_nf2',
<                      m=8, create_pin=True
<                      )
<     laygen.add_template_from_cell()
< 
2883,2891d2657
<     laygen.add_cell('latch_2ck_1x')
<     laygen.sel_cell('latch_2ck_1x')
<     laygen.templates.sel_library(workinglib)
<     generate_latch_2ck(laygen, objectname_pfix='LATCH0', placement_grid=pg,
<                    routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3, routing_grid_m3m4=rg_m3m4,
<                    origin=np.array([0, 0]), m=1, create_pin=True)
<     laygen.templates.sel_library(utemplib)
<     laygen.add_template_from_cell()
< 
3030c2796
<                  'nsw_2x', 'nsw_4x', 'nsw_8x', 'nsw_12x', 'nsw_16x',
---
>                  'nsw_2x', 'nsw_4x', 'nsw_8x',
3033,3034c2799
<                  'nor_2x', 'nor_4x', 'nor_8x',
<                  'latch_2ck_1x', 'latch_2ck_2x', 'latch_2ck_4x', 'latch_2ck_8x',
---
>                  'latch_2ck_2x', 'latch_2ck_4x', 'latch_2ck_8x',
diff -r ./generators/logic_templates_schematic_generator.py ../laygo_bak170316_currupt/generators/logic_templates_schematic_generator.py
43c43
<                 'nsw':[2,4,8,12,16],
---
>                 'nsw':[2,4,8],
47,48c47
<                 'nor':[2,4,8],
<                 'latch_2ck':[1,2,4,8],
---
>                 'latch_2ck':[2,4,8],
diff -r ./generators/sampler_nmos_layout_generator.py ../laygo_bak170316_currupt/generators/sampler_nmos_layout_generator.py
21,32d20
<     #params = dict(
<     #    lch=16e-9,
<     #    wp=8,
<     #    wn=8,
<     #    fgn=20,
<     #    fg_inbuf_list=[(10, 10), (20, 20)],
<     #    fg_outbuf_list=[(4, 4), (24, 24)],
<     #    nduml=4,
<     #    ndumr=6,
<     #    nsep=2,
<     #    intent='ulvt',
<     #)
37,38c25,26
<         fgn=12,
<         fg_inbuf_list=[(8, 8), (14, 14)],
---
>         fgn=20,
>         fg_inbuf_list=[(10, 10), (20, 20)],
40,41c28,29
<         nduml=10,
<         ndumr=4,
---
>         nduml=4,
>         ndumr=6,
diff -r ./generators/sampler_nmos_schematic_generator.py ../laygo_bak170316_currupt/generators/sampler_nmos_schematic_generator.py
21,32d20
<     #params = dict(
<     #    lch=16e-9,
<     #    wp=6,
<     #    wn=6,
<     #    fgn=20,
<     #    fg_inbuf_list=[(10, 10), (20, 20)],
<     #    fg_outbuf_list=[(4, 4), (24, 24)],
<     #    nduml=4,
<     #    ndumr=6,
<     #    nsep=2,
<     #    intent='ulvt',
<     #)
35,38c23,26
<         wp=8,
<         wn=8,
<         fgn=12,
<         fg_inbuf_list=[(8, 8), (14, 14)],
---
>         wp=6,
>         wn=6,
>         fgn=20,
>         fg_inbuf_list=[(10, 10), (20, 20)],
40,41c28,29
<         nduml=10,
<         ndumr=4,
---
>         nduml=4,
>         ndumr=6,
46,47d33
< 
< 
diff -r ./generators/sampler_nmos_verify.py ../laygo_bak170316_currupt/generators/sampler_nmos_verify.py
16d15
< tb_cell_ac_cload = 'sampler_nmos_tb_ac_cload'
18d16
< tb_cell_noise_cload = 'sampler_nmos_tb_noise_cload'
21,22c19,20
< cload=64e-15
< vih=0.36
---
> cload=20e-15
> vicm=0.4
27,40c25,27
< extracted = True
< verify_ac = False
< verify_ac_cload = True #use ideal c instead of capdac
< verify_noise = True
< verify_noise_cload = True #use ideal c instead of capdac
< 
< yamlfile_spec="adc_sar_spec.yaml"
< yamlfile_size="adc_sar_size.yaml"
< if load_from_file==True:
<     with open(yamlfile_spec, 'r') as stream:
<         specdict = yaml.load(stream)
<     with open(yamlfile_size, 'r') as stream:
<         sizedict = yaml.load(stream)
<     cload=specdict['c_ground']*sizedict['c_m']*(2**(specdict['n_bit']-1))
---
> extracted = False
> verify_ac = True
> verify_noise = False
69,84c56,65
<     if verify_ac_cload==True:
<         print('creating testbench %s__%s' % (impl_lib, tb_cell_ac_cload))
<         tb = prj.create_testbench(tb_lib, tb_cell_ac_cload, impl_lib, cell_name, impl_lib)
<         tb.set_parameter('cload', cload)
<     else:
<         print('creating testbench %s__%s' % (impl_lib, tb_cell_ac))
<         tb = prj.create_testbench(tb_lib, tb_cell_ac, impl_lib, cell_name, impl_lib)
<     for vih_val in [vih*k for k in [0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5]]:
<         #tb.set_sweep_parameter('cload', values=[5e-15, 20e-15, 100e-15])
<         tb.set_parameter('vicm', vih_val)
<         tb.set_simulation_environments(['tt', 'ff', 'ss'])
<         if extracted:
<             tb.set_simulation_view(impl_lib, cell_name, 'calibre')
<             if verify_ac_cload==False:
<                 tb.set_simulation_view(impl_lib, 'capdac', 'calibre')
<         tb.update_testbench()
---
>     print('creating testbench %s__%s' % (impl_lib, tb_cell_ac))
>     tb = prj.create_testbench(tb_lib, tb_cell_ac, impl_lib, cell_name, impl_lib)
>     tb.set_parameter('vdd', vdd)
>     tb.set_parameter('vicm', vicm)
> 
>     tb.set_simulation_environments(['tt'])
> 
>     if extracted:
>         tb.set_simulation_view(impl_lib, cell_name, 'calibre')
>         tb.set_simulation_view(impl_lib, 'capdac', 'calibre')
86,87c67,70
<         print('running simulation')
<         tb.run_simulation()
---
>     tb.update_testbench()
>     '''
>     print('running simulation')
>     tb.run_simulation()
89,90c72,73
<         print('loading results')
<         results = bag.data.load_sim_results(tb.save_dir)
---
>     print('loading results')
>     results = bag.data.load_sim_results(tb.save_dir)
92c75,76
<         print('vih:'+str(vih_val)+', bw_GHz:'+str(results['bw']/1e9))
---
>     print('bw:'+str(results['bw']))
>     '''
96,106c80,86
<     if verify_noise_cload==True:
<         print('creating testbench %s__%s' % (impl_lib, tb_cell_noise_cload))
<         tb_noise = prj.create_testbench(tb_lib, tb_cell_noise_cload, impl_lib, cell_name, impl_lib)
<         tb_noise.set_parameter('cload', cload)
<     else:
<         print('creating testbench %s__%s' % (impl_lib, tb_cell_noise))
<         tb_noise = prj.create_testbench(tb_lib, tb_cell_noise, impl_lib, cell_name, impl_lib)
< 
<     vih_val=vih
<     tb_noise.set_parameter('vicm', vih_val)
<     tb_noise.set_simulation_environments(['tt', 'ff', 'ss'])
---
>     print('creating testbench %s__%s' % (impl_lib, tb_noise_cell))
>     tb_noise = prj.create_testbench(tb_lib, tb_noise_cell, impl_lib, cell_name, impl_lib)
>     tb_noise.set_parameter('cload', cload)
>     tb_noise.set_parameter('vamp', vamp_noise)
> 
>     tb_noise.set_simulation_environments(['tt'])
> 
108,110c88,90
<         tb_noise.set_simulation_view(impl_lib, cell_name, 'calibre')
<         if verify_noise_cload==False:
<             tb_noise.set_simulation_view(impl_lib, 'capdac', 'calibre')
---
>         #tb_noise.set_simulation_view(impl_lib, cell_name, 'calibre')
>         tb_noise.set_simulation_view(impl_lib, 'capdac', 'calibre')
> 
118,119c98
<     print('von(uV) :'+str(results['von']))
<     print('noise might be amplified to capture modeling errors')
---
>     print('0/1 ratio (0.841 for 1sigma):'+str(results['zero_one_ratio']))
Only in ../laygo_bak170316_currupt: .git
diff -r ./LayoutIO.py ../laygo_bak170316_currupt/LayoutIO.py
318,319d317
<                 if inst.shape[0]<1 or inst.shape[1]<1: #unsupported array
<                     print("[WARNING] Instance "+inst.name+" ("+ inst.cellname+") has an unsupported shape:" + str(inst.shape))
